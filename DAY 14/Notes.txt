Day - 2
-------

configuration file names --> .cnf, .conf, .ini


variables --> system/built-in variable, user defined variables

Splunk --> 

sssd --> 


server001 --> Windows --> Domain: apac.com

server001.apac.com

APAC/nepolean


server002 --> Linux --> System Security Services Daemon

Samba --> 

Cyberark --> password vault

Man/Help System:
---------------

# To list the files & directories

man ls

ls -la ==> ll


Pipeline


cmd1  | cmd2
output | input

Day - 3
-------

history --> to keep the record of executed commands based on the limit.

lab:

create a folder --> project1 project2 using mkdir cmd  --> mkdir project1 project2
create a file under project1 (test.txt)  -> touch test.txt
copy test.txt to project2 directory --> cp project1/test.txt project2


cp --> same system/server
scp --> remote copy

scp /tmp/project root@10.3.5.3:/etc

Day - 4
-------

arithmetic operators --> +, -, *, /

a=10
b=5

echo $a,$b

To perform mathematical operations: $(( $a + $b )) OR $(expr $a + $b )


1. Ticket handling
2. Change process / Monthly activity (Patching)
3. Service Res: Ex: Software management, User Management
4. Compliance related - server hardening
5. Server Lifecycle management (Deployment, Resource Management, Decom)
6. Reporting (Daily/Weekly/Monthly)

systemctl mcafee status

                   
1.reading the ticket --> 2.taking the CI --> 3.taking/finding the issue from the ticket --> 4.connect the server --> 5.validate the issue --> 6.remediation on that issue --> 7.validate the issue again --> 8.update the worklogs -- > 9.close the ticket


1. Semi-automation (partial automation)

4-7 --> os level
1-3 & 8-9 --> ticketing tool

2. end-to-end automation (fully automated)

1-9 --> shell script

API --> Application Programming Interface

Username=Neo

echo $Username

user1=Neo
user2=Kumar

user_name

user_1
user_2

1user
2user

1. User/Group Account Management --> create, modify, delete, sudo
2. Software Management --> install, upgrade, remove
3. Service Management --> status check, start, stop, restart
4. Resource Management --> CPU, MEM, Disk Usage
5. File System Management (Files & Directory) --> create, copy, move, delete
6. Configuration Management --> As per the compliance

> --> write output data into a file
< --> reading a content from a file
>> --> append output data into a file
2> --> write error details into a file

less, more

cat file.txt

cat file.txt | less

cat file.txt | more

Day - 5
-------

find --> to search files and folders

file permission: 


read - 4
write - 2
execute - 1
restriction --> 0

read & write --> 4+2 ==> 6
write & execute --> 2+1 ==> 3

osname == "redhat"

REDHAT

commands: find, chmod, cat, paste, more, less, sort, cut, uniq, tr

DAY - 6
-------

commands: 

grep - to filter the data based on the pattern/keyword

Editor --> vi, vim

vim filename
esc + i --> for editing the file
esc + :w --> writing/saving the content on the file
esc + :q --> quit/close the file

:wq --> write & close
:wq! --> forcefully to perform write & close
:q! --> forcefully close the file

esc + u --> undo operation
esc + cntl+r --> redo operation


shell script
------------

1. repeated task
2. multiple commands
3. to form logical representation
4. proper input, processing & output

Inputs can be from different sources: user, file, command output, CMDB/application (API), DB

Output: CLI, file (txt, csv, log), email, storing in centralized system


Use case: User management on linux servers

1.user addition
2.user modification - password change, sudo permission
3.user deletion



# --> comment

DAY - 7
-------

nUMBER
Number_Specified



service management --> check, start, stop, reload, restart

systemctl status <servicename>

Ex: systemctl status sshd

systemctl stop <servicename>

systemctl status sshd | grep active



$@ --> array
$* --> string


sh script.sh sshd samba rsyslog

$1
$2

$@
$*
$#

DAY - 8
-------

Data types: 

integers --> numbers: 0,329,34545,21323, -324,-54634

float --> decimal: 10.56, 12.75, -8.3

chars --> letters: A,B,a,c

string --> words: Name, Kumar, Age, ab, bc

Boolean --> true - 0 / false - 1


int a = 10;

a=10
name="Raja"

Other scripting:
if()
{

}

if [$name == "Raja"]
then


fi


if(condition1)
{	
    block of code
}
else if(condition2)
{
    block of code
}
else if( cond3 )
{

}
else
{
  Nothing is working
}

Switch-Case
-----------

software management --> install, modify/upgrade, uninstall/remove

Redhat:

yum -y install <softwarename>
yum upgrade <softwarename>
yum remove <softwarename>

Ubuntu:

apt install <softwarename>

Day - 9
-------

root - admin
sudo - special permission

Iteration - Looping:


for(i=0;i>10;i++)

samba httpd ntpd
0       1     2


n --> position/order
index --> n-1


string --> $variable
array --> ${variable[*]}


cmd_input=pwd

while [ $cmd_input != "exit" ]
do
  $cmd_input
  read -p "Enter the command to you want to execute:" cmd_input
  echo "The entered command is: $cmd_input"
done



ls
ls -la
ls -la | grep

variable - single values --> $variable_name

arrays --> {} --> ${variable_name[*]}

conditions --> if,while --> [], [[ ]]

function --> ()

break --> stop/terminate the looping
continue --> skip the current iteration

Day - 10
--------

Debugging:

Arrays - store more than one values

chronyd
crond
rsyslog
	

server001.apac.com
server002.emea.com
server003.na.com
server00004.apac.com


if [ $server == "apac.com" ]
then

elif [ $server == "emea.com" ]

fi

${string:10}

len=${#string} == 18

${string:len-8}

VM Deployment: (Day 0)
Post configuration: (Day 1)
User addition, Install agents (monitoring agent, backup agent, Security agents, etc.,), CMDB update 


mount - mount the file system
umount - unmount file system

yum --> apt 

Storage Management --> Array --> Volume --> File share (NFS/CIFS)

Day - 11
--------

A | P

ServiceNow | Shell scripting

https://company.service-now.com/dashboard -- Application URL

INC0001

https://company.service-now.com/api
https://company.service-now.com/api/v1
https://company.service-now.com/api/v2
https://company.service-now.com/api/v3

1. API Document
2. API Credentials

API Developer


Day - 12
--------

CI/CD --> Continuous integration & continuous Deployment

vRA/vRO --> VMware
Terraform --> Hashicorp
HPOO --> HPE 
SCORCH --> Microsoft
AO --> BMC
SNOW Workflow --> SNOW

Ansible
1. Ansible CLI (Core) --> Free/Open source --> No Support model
2. Ansible Tower (Ansible Automation Controller) --> Enterprise web interface (Paid) --> Support model
3. AWX (Ansible Web Interface) --> Free Web interface -->  No support model

Dev/QA -> Non Prod Environment/Instance
Ansible Server + Dev/QA Linux/Windows

Prod
Ansible Server + Prod Linux/Windows

Dev
 AppLinux:
    appserver001
    appserver002
 AppWindows:
    appserver100
    appserver200
 DB

DAY - 13
--------
Installation:
------------
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
yum install -y ansible

To check the version: ansible --version


1. Client server - Linux
------------------------
vim /etc/ssh/sshd_config

PermitRootlogin yes
PasswordAuthentication yes

systemctl restart sshd


2. Ansible server
------------------
ssh-keygen

ssh-copy-id root@10.5.0.127

Idempotency process

DAY - 14
--------

File system management --> Get the file permissions, Creating a file, copying the file from Ansible to Client server, fetching the files from client server to ansible


[linux]
server01 --> Redhat
server02 --> Centos
server03 --> Ubuntu

stat, file, copy, fetch, setup

.yml or .yaml


---
 - hosts: dev
   gather_facts: no
   tasks:
     - yum:
        name: samba
        state: latest

     - debug:
         msg: "Installed Successfully!" 

 - hosts: db
   tasks:
     - yum:
        name: samba
        state: latest

     - debug:
         msg: "Installed Successfully!" 

service management --> service
